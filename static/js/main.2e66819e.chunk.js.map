{"version":3,"sources":["components/NavBar/NavBar.js","components/Body/Body.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","useState","username","setusername","password","setpassword","history","useHistory","logout","localStorage","removeItem","push","window","location","reload","submitButton","event","preventDefault","users","JSON","parse","getItem","i","user","swal","setItem","className","onClick","type","placeholder","value","onChange","e","target","Body","name","setname","src","alt","width","onSubmit","newUser","stringify","Dashboard","App","path","component","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e66819e.chunk.js","sourcesContent":["import bootstrap from 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useState } from 'react';\r\nimport './NavBar.css';\r\nimport swal from 'sweetalert';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction NavBar() {\r\n  const [username, setusername] = useState('');\r\n  const [password, setpassword] = useState('');\r\n  const history = useHistory();\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('loggedin');\r\n    history.push('/');\r\n    window.location.reload(true);\r\n  };\r\n\r\n  function submitButton(event) {\r\n    event.preventDefault();\r\n    var users = JSON.parse(localStorage.getItem('users'));\r\n\r\n    var i = 0;\r\n    for (var user of users) {\r\n      if (user.username == username && user.password == password) {\r\n        i++;\r\n      }\r\n    }\r\n\r\n    if (i == 1) {\r\n      swal('Welcome!', 'Login Successful!', 'success');\r\n      localStorage.setItem('loggedin', 'loggedin');\r\n      history.push('/dashboard');\r\n      window.location.reload(true);\r\n    } else {\r\n      swal('Sorry!', 'Invalid Login!', 'error');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='row nav'>\r\n        <div className='col-md-6'>\r\n          <h1>FaceBook</h1>\r\n        </div>\r\n        <div className='col-md-6'>\r\n          {(() => {\r\n            if (localStorage.getItem('loggedin')) {\r\n              return <button onClick={logout}>LOGOUT</button>;\r\n            } else {\r\n              return (\r\n                <div>\r\n                  <input\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    value={username}\r\n                    onChange={(e) => {\r\n                      setusername(e.target.value);\r\n                    }}\r\n                  />\r\n                  <input\r\n                    type='text'\r\n                    placeholder='Password'\r\n                    value={password}\r\n                    onChange={(e) => {\r\n                      setpassword(e.target.value);\r\n                    }}\r\n                  />\r\n                  <button onClick={submitButton}>LOGIN</button>\r\n                </div>\r\n              );\r\n            }\r\n          })()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import bootstrap from 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useState } from 'react';\r\nimport swal from 'sweetalert';\r\n\r\nfunction Body() {\r\n  const [name, setname] = useState('');\r\n  const [username, setusername] = useState('');\r\n  const [password, setpassword] = useState('');\r\n\r\n  function submitForm(event) {\r\n    event.preventDefault();\r\n    var users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    var newUser = {\r\n      name: name,\r\n      username: username,\r\n      password: password,\r\n    };\r\n    users.push(newUser);\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n\r\n    swal('Thank you!', 'Registration is Successful!', 'success');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='row justify-content-center'>\r\n        <div className='col-md-6'>\r\n          <img\r\n            src='https://static.xx.fbcdn.net/rsrc.php/v3/y7/r/7XdR1KwCifL.png'\r\n            alt='connecting the world'\r\n            width='100%'\r\n          />\r\n        </div>\r\n        <div className='col-md-4'>\r\n          <h1>Register</h1>\r\n          <form onSubmit={submitForm}>\r\n            <input\r\n              type='text'\r\n              placeholder='Name'\r\n              className='form-control'\r\n              value={name}\r\n              onChange={(e) => {\r\n                setname(e.target.value);\r\n              }}\r\n            />\r\n            <input\r\n              type='text'\r\n              placeholder='Username'\r\n              className='form-control'\r\n              value={username}\r\n              onChange={(e) => {\r\n                setusername(e.target.value);\r\n              }}\r\n            />\r\n            <input\r\n              type='text'\r\n              placeholder='Password'\r\n              className='form-control'\r\n              value={password}\r\n              onChange={(e) => {\r\n                setpassword(e.target.value);\r\n              }}\r\n            />\r\n            <button type='submit' className='btn btn-primary'>\r\n              SIGNUP\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","import React from 'react';\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Fatima's Facebook Dashboard page</h1>\r\n      <p>Created using Reactjs</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar/NavBar';\nimport Body from './components/Body/Body';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <BrowserRouter>\n        <NavBar />\n        <Route path='/' component={Body} exact />\n        <Route path='/dashboard' component={Dashboard} exact />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}